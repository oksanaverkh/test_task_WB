workspace {

model {
    user = person "Клиент" "Использует маркетплейс"
    supplier = person "Поставщик" "Использует маркетплейс"
    admin = person "Администратор" "Управляет маркетплейсом"

    Marketplace = softwareSystem "Marketplace" "Маркетплейс" {
        webApp_user = container "Web-приложение для клиентов" "Интерфейс для клиентов." "Web Application"
        webApp_supplier = container "Web-приложение для поставщиков" "Интерфейс для поставщиков." "Web Application"
        mobileAppiOS = container "Mobile App iOS" "iOS приложение для клиентов." "iOS"
        mobileAppAndroid = container "Mobile App Android" "Android приложение для клиентов." "Android"
        adminWebApp = container "Web App Admin" "Интерфейс для администраторов." "Web Application"
        backend = container "Backend" "Обрабатывает бизнес-логику." "Server-side Application" {
            connectionBalancer = component "Балансировщик соединений" "Распределяет нагрузку на систему" "Component: Nginx"
            authService = component "Сервис авторизации и регистрации пользователей" "Управляет авторизацией и регистрацией клиентов и продавцов" "Server-side Application"
            sellerService = component "Сервис продажи товаров" "Сервис размещения товаров на маркетплейсе для поставщиков" "Server-side Application"
            catalogueService = component "Сервис управления каталогом товаров" "Сервис просмотра и поиска товаров" "Server-side Application"
            basketService = component "Сервис управления корзиной" "Сервис работы с товарами в корзине" "Server-side Application"
            orderService = component "Сервис управления заказами" "Сервис оформления заказов" "Server-side Application"
            paymentIntegrationService = component "Сервис интеграций с сервисами оплаты" "Интеграция со платежными системами" "Server-side Application"
            deliveryIntegrationService = component "Сервис интеграций с сервисами доставки" "Интеграция со службами доставки" "Server-side Application"
            
        }
        database_clients = container "База данных пользователей" "Хранит информацию о клиентах и поставщиках" "Database_clients"
        database_main = container "База данных" "Хранит основную информацию о товарах, заказах и т.д." "Database_main"
        delivery_requests = container "Очередь запросов к сервисам доставки" "Организовывает порядок запросов к сервисам доставки" "Component: Apache Kafka"
        payment_requests = container "Очередь запросов к платежным системам" "Организовывает порядок запросов к сервисам оплаты" "Component: Apache Kafka"
    }

    delivery = softwareSystem "Доставка" "Система доставки"
    payment = softwareSystem "Оплата" "Система оплаты"


    user -> webApp_user "Использует"
    user -> mobileAppiOS "Использует"
    user -> mobileAppAndroid "Использует"
    supplier -> webApp_supplier "Использует"
    admin -> adminWebApp "Использует"
    webApp_user -> connectionBalancer "Взаимодействует" "API"
    webApp_supplier -> connectionBalancer "Взаимодействует" "API"
    mobileAppiOS -> connectionBalancer "Взаимодействует" "API"
    mobileAppAndroid -> connectionBalancer "Взаимодействует" "API"
    adminWebApp -> connectionBalancer "Взаимодействует" "API"
    connectionBalancer -> authService "Взаимодействует" "API"
    connectionBalancer -> sellerService "Взаимодействует" "API"
    connectionBalancer -> catalogueService "Взаимодействует" "API"
    connectionBalancer -> basketService "Взаимодействует" "API"
    connectionBalancer -> orderService "Взаимодействует" "API"
    connectionBalancer -> deliveryIntegrationService "Взаимодействует" "API"
    connectionBalancer -> paymentIntegrationService "Взаимодействует" "API"
    authService -> database_clients "Управление данными пользователей" "SQL"
    sellerService -> database_main "Получение и запись данных" "SQL"
    catalogueService -> database_main "Получение данных" "SQL"
    basketService -> database_main "Получение и запись данных" "SQL"
    orderService -> database_main "Получение и запись данных" "SQL"
    deliveryIntegrationService -> delivery_requests "Получение данных о сроке и стоимости доставки заказов" "API"
    delivery_requests -> delivery "Получение данных о сроке и стоимости доставки заказов" "HTTPS/JSON"
    paymentIntegrationService -> payment_requests "Получение данных о сроке и стоимости доставки заказов" "API"
    payment_requests -> payment "Осуществление оплаты заказов" "HTTPS/JSON"

}

views {
    component backend {
        include *
        autolayout lr
    }

    theme default
}
}